{"version":3,"sources":["components/VHeader.js","components/Sidenavbar.js","App.js","serviceWorker.js","index.js"],"names":["VHeader","Header","Navbar","href","className","Body","Nav","Item","eventKey","icon","Icon","headerStyles","padding","fontSize","height","background","color","whiteSpace","overflow","iconStyles","width","lineHeight","textAlign","NavToggle","expand","onChange","appearance","Dropdown","placement","trigger","renderTitle","children","style","pullRight","onClick","Sidenavbar","props","state","handleToggle","bind","this","setState","Sidebar","display","flexDirection","collapsible","Sidenav","size","verticalAlign","marginLeft","expanded","defaultOpenKeys","active","React","Component","App","Container","Content","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba4f098d.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Nav, Header, Icon } from 'rsuite';\n\nconst VHeader = () => {\n  return (\n    <Header>\n      <Navbar>\n        <Navbar.Header>\n          <a href='https://google.com' className='d-inline-block pt-3 pl-5 pr-5'>Th√©o Cerutti</a>\n        </Navbar.Header>\n        <Navbar.Body>\n          <Nav>\n            <Nav.Item eventKey='1' icon={ <Icon icon='home'/> }>Me</Nav.Item>\n            <Nav.Item eventKey='2'>Projects</Nav.Item>\n            <Nav.Item eventKey='3'>Experiences</Nav.Item>\n          </Nav>\n        </Navbar.Body>\n      </Navbar>\n    </Header>\n  );\n};\n\nexport default VHeader;","import React from 'react';\nimport { Navbar, Dropdown, Icon, Nav, Sidenav, Sidebar } from 'rsuite';\n\nconst headerStyles = {\n  padding: 18,\n  fontSize: 16,\n  height: 56,\n  background: '#34c3ff',\n  color: ' #fff',\n  whiteSpace: 'nowrap',\n  overflow: 'hidden'\n};\n\nconst iconStyles = {\n  width: 56,\n  height: 56,\n  lineHeight: '56px',\n  textAlign: 'center'\n};\n\nconst NavToggle = ({ expand, onChange }) => {\n  return (\n    <Navbar appearance='subtle' className='nav-toggle'>\n      <Navbar.Body>\n        <Nav>\n          <Dropdown\n            placement='topStart'\n            trigger='click'\n            renderTitle={ children => {\n              return <Icon style={ iconStyles } icon='cog'/>;\n            } }\n          >\n            <Dropdown.Item>Help</Dropdown.Item>\n            <Dropdown.Item>Settings</Dropdown.Item>\n            <Dropdown.Item>Sign out</Dropdown.Item>\n          </Dropdown>\n        </Nav>\n\n        <Nav pullRight>\n          <Nav.Item onClick={ onChange } style={ { width: 56, textAlign: 'center' } }>\n            <Icon icon={ expand ? 'angle-left' : 'angle-right' }/>\n          </Nav.Item>\n        </Nav>\n      </Navbar.Body>\n    </Navbar>\n  );\n};\n\nclass Sidenavbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expand: true\n    };\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n\n  handleToggle() {\n    this.setState({\n      expand: !this.state.expand\n    });\n  }\n\n  render() {\n    const { expand } = this.state;\n    return (\n      <Sidebar\n        style={{ display: 'flex', flexDirection: 'column' }}\n        width={expand ? 260 : 56}\n        collapsible\n      >\n        <Sidenav.Header>\n          <div style={ headerStyles }>\n            <Icon icon='logo-analytics' size='lg' style={ { verticalAlign: 0 } }/>\n            <span style={ { marginLeft: 12 } }> BRAND</span>\n          </div>\n        </Sidenav.Header>\n        <Sidenav\n          expanded={ expand }\n          defaultOpenKeys={ ['3'] }\n          appearance='subtle'\n        >\n          <Sidenav.Body>\n            <Nav>\n              <Nav.Item eventKey='1' active icon={ <Icon icon='dashboard'/> }>Me</Nav.Item>\n              <Nav.Item eventKey='2' icon={ <Icon icon='group'/> }>Projects</Nav.Item>\n              <Nav.Item eventKey='3' icon={ <Icon icon='group'/> }>Experiences</Nav.Item>\n              <Nav.Item eventKey='4' icon={ <Icon icon='group'/> }>CV</Nav.Item>\n            </Nav>\n          </Sidenav.Body>\n        </Sidenav>\n        <NavToggle className='' expand={ expand } onChange={ this.handleToggle }/>\n      </Sidebar>\n    );\n  }\n}\n\nexport default Sidenavbar;","import React from 'react';\nimport VHeader from './components/VHeader';\nimport Sidenavbar from './components/Sidenavbar';\nimport { Container, Content, Footer } from 'rsuite';\n\nfunction App() {\n  return (\n    <div className='show-fake-browser'>\n      <Container>\n        <Sidenavbar/>\n        <Container>\n          <VHeader/>\n          <Content>\n            Hello !  This is my github page!\n          </Content>\n          <Footer>...</Footer>\n        </Container>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${ process.env.PUBLIC_URL }/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './config';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}